@page "/users"
@using ShopInfo.Controllers
@using ShopInfo.Models
@inject IJSRuntime js
@inject NavigationManager navManager
<PageTitle>Users</PageTitle>

<h1 class="text-center">Users</h1>
<hr />

<div class="row my-3 mx-0 justify-content-start">
    <div class="col-auto pe-1 ps-0">
        <input type="radio" class="btn-check" name="options-outlined" id="asc-outlined" autocomplete="off" checked @onchange="OnAscChange">
        <label class="btn btn-outline-primary" for="asc-outlined"><span class="oi oi-caret-top" aria-hidden="true"></span> Ascending</label>
    </div>

    <div class="col-auto pe-1 ps-0">
        <input type="radio" class="btn-check" name="options-outlined" id="desc-outlined" autocomplete="off" @onchange="OnDescChange">
        <label class="btn btn-outline-primary" for="desc-outlined"><span class="oi oi-caret-bottom" aria-hidden="true"></span> Descending</label>
    </div>

    <div class="col-auto pe-1 ps-0">
        <input type="number" class="h-100 rounded border-1 p-1 ps-2" placeholder="Enter row count" aria-label="Count" @onchange="OnCountChange">
    </div>
</div>

<table class="table p-0">
    <thead>
        <tr class="bg-primary text-white">
            <th>Id</th>
            <th>FirstName</th>
            <th>MiddleName</th>
            <th>LastName</th>
            <th>Birthdate</th>
            <th>Phone</th>
            <th>Email</th>
            <th>Password</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr class="bg-light">
                <td>@user.Id</td>
                <td>@user.FirstName</td>
                <td>@user.MiddleName</td>
                <td>@user.LastName</td>
                <td>@user.Birthdate.ToShortDateString()</td>
                <td>@user.Phone</td>
                <td>@user.Email</td>
                <td>@user.Password</td>
                <td>
                    <button type="button" class="btn btn-warning btn-sm" @onclick="() => ShowModalEdit(user.Id)"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteUser(user.Id))"><span class="oi oi-x" aria-hidden="true"></span></button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="container d-flex justify-content-center mb-3">
    <button class="btn btn-success w-25" @onclick="ShowModalCreate">Add User</button>
</div>

<!-- Modal Create -->
@if (showModalCreate)
{
    <div class="modal fade show d-block bg-white bg-opacity-50">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title ms-2">Add User</h2>
                    <button type="button" class="btn-close" @onclick="HideModalCreate"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.FirstName" id="firstName" class="form-control form-control-lg" placeholder="First Name" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.MiddleName" id="middleName" class="form-control form-control-lg" placeholder="Middle Name" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.LastName" id="lastName" class="form-control form-control-lg" placeholder="Last Name" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="date" @bind="model.Birthdate" id="birthdate" class="form-control form-control-lg" placeholder="Birthdate" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="email" @bind="model.Email" id="email" class="form-control form-control-lg" placeholder="Email" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="tel" @bind="model.Phone" id="phone" class="form-control form-control-lg" placeholder="Phone" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.Password" id="password" class="form-control form-control-lg" placeholder="Password" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModalCreate">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddUser">Add</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Edit -->
@if (showModalEdit)
{
    <div class="modal fade show d-block bg-white bg-opacity-50">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title ms-2">Edit User</h2>
                    <button type="button" class="btn-close" @onclick="HideModalEdit"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.Id" id="id" class="form-control form-control-lg" disabled />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.FirstName" id="firstName" class="form-control form-control-lg" placeholder="First Name" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.MiddleName" id="middleName" class="form-control form-control-lg" placeholder="Middle Name" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.LastName" id="lastName" class="form-control form-control-lg" placeholder="Last Name" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="date" @bind="model.Birthdate" id="birthdate" class="form-control form-control-lg" placeholder="Birthdate" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="email" @bind="model.Email" id="email" class="form-control form-control-lg" placeholder="Email" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="tel" @bind="model.Phone" id="phone" class="form-control form-control-lg" placeholder="Phone" />
                        </div>

                        <div class="form-outline mb-4">
                            <input type="text" @bind="model.Password" id="password" class="form-control form-control-lg" placeholder="Password" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModalEdit">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="(async () => await EditUser(model.Id))">Edit</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    //User list
    private bool isAsc;
    private int n;
    private List<User> users;

    private void OnAscChange(ChangeEventArgs args)
    {
        isAsc = true;
        RefreshUsers();
    }

    private void OnDescChange(ChangeEventArgs args)
    {
        isAsc = false;
        RefreshUsers();
    }

    private void OnCountChange(ChangeEventArgs args)
    {
        //int val;
        if(int.TryParse(args.Value.ToString(), out var val))
        {
            if (val >= 0)
            {
                n = val;
                RefreshUsers();
            }
        }

    }

    //Modal Add
    private bool showModalCreate = false;

    private void ShowModalCreate()
    {
        model = new Model();
        showModalCreate = true;
    }

    private void HideModalCreate()
    {
        showModalCreate = false;
        model = new Model();
    }

    //Logic Add
    private class Model
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string MiddleName { get; set; }
        public DateTime Birthdate { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task AddUser()
    {
        var usersController = new UsersController();
        var result = usersController.UserRegister(new User
            {
                FirstName = model.FirstName,
                LastName = model.LastName,
                MiddleName = model.MiddleName,
                Birthdate = model.Birthdate,
                Email = model.Email,
                Phone = model.Phone,
                Password = model.Password,

            });
        RefreshUsers();
        HideModalCreate();
    }

    //Modal Edit
    private bool showModalEdit = false;

    private void ShowModalEdit(int id)
    {
        var usersController = new UsersController();
        var result = usersController.GetUser(id);
        model = new Model()
            {
                Id = result.Id,
                FirstName = result.FirstName,
                LastName = result.LastName,
                MiddleName = result.MiddleName,
                Birthdate = result.Birthdate,
                Email = result.Email,
                Phone = result.Phone,
                Password = result.Password,
            };
        showModalEdit = true;
    }

    private void HideModalEdit()
    {
        showModalEdit = false;
        model = new Model();
    }

    //Logic Edit
    private async Task EditUser(int id)
    {
        var usersController = new UsersController();
        var result = usersController.UpdateUser(new User
            {
                Id = model.Id,
                FirstName = model.FirstName,
                LastName = model.LastName,
                MiddleName = model.MiddleName,
                Birthdate = model.Birthdate,
                Email = model.Email,
                Phone = model.Phone,
                Password = model.Password,

            });
        RefreshUsers();
        HideModalEdit();
    }

    //Delete
    private async Task DeleteUser(int id)
    {
        var usersController = new UsersController();
        var result = usersController.DeleteUser(id);
        RefreshUsers();
    }

    //Init and show list
    private void RefreshUsers()
    {
        var usersController = new UsersController();
        users = usersController.GetUsers(n: n, isAsc: isAsc).ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        isAsc = true;
        n = 5;
        RefreshUsers();
    }
}
